/* File: complexnumbers.cpp
Implement complex numbers as a class using operators 
Programmer: Aparna Mohan 		Date: October 2, 2018 */

#include <iostream>
#include <fstream>
using namespace std;

class complex {
private:
	float x; // real part
	float y; // imaginary part
public:
	complex(float re = 0.0, float im = 0.0);
	float real(void) const; // return real part
	float imag(void) const; // return imag part
	void real(float re); // set real part
	void imag(float im); // set imag part
};

////////////////////// prototypes of complex operators //////////////////////

complex operator+(const complex &a, const complex &b); //type complex bc returning a complex val
complex operator-(const complex &a, const complex &b);
complex operator*(const complex &a, const complex &b);
complex operator/(const complex &a, const complex &b);
ostream& operator<<(ostream& out, const complex &a);
istream& operator>>(istream& in, complex &a);

int main(void){
	complex a, b, c;
	cout << "Enter two complex numbers in the form (re, im): ";
	cin >> a >> b;
	c = a + b;
	cout << "The sum of "<< a << " and " << b << " is " << c << endl;
	c = a - b;
	cout << "The difference of " << a << " and " << b << " is " << c << endl;
	c = a * b;
	cout << "The product of " << a << " and " << b << " is " << c << endl;
	c = a / b;
	cout << "The division of " << a << " and " << b << " is " << c << endl;

return 0;
}
///////////////////////// implementation of complex ////////////////////
complex::complex(float re, float im){
	x = re;
	y = im;
}

float complex::real(void) const{ //return real part
	return x;
}
float complex::imag(void) const{ //return imaginary part
	return y;
}

void complex::real(float re){ // set real part
	x = re;
}

void complex::imag(float im){
	y = im;
}

//////////////////////// implementation of complex operators /////////////
complex operator+(const complex &a, const complex &b){
	complex sum;
	sum.real(a.real() + b.real());
	sum.imag(a.imag()+ b.imag());
	return sum;
}

complex operator-(const complex &a, const complex &b){
	complex difference;
	difference.real(a.real() - b.real());
	difference.imag(a.imag() - b.imag());
	return difference;
}

complex operator*(const complex &a, const complex &b){
	float re = a.real()*b.real() - a.imag()*b.imag(); 
	float im = a.real()*b.imag() + a.imag()*b.real();
	complex product(re, im);
	return product;
}

complex operator/(const complex &a, const complex &b){
	float d = b.real()*b.real() + b.imag()*b.imag();
	float re = a.real()*b.real() + a.imag()*b.imag();
	float im = -a.real()*b.imag() + a.imag()*b.real();
	complex quotient(re/d, im/d);
	return quotient;
}

istream& operator>>(istream& in, complex& a){
	char discard;
	float re, im;
	in>>discard>>re>>discard>>im>>discard; //discards parentheses & comma
	a.real(re);
	a.imag(im);
	return in;
}
ostream& operator<<(ostream& out, const complex &a){
	out<< "(" << a.real()<< "," << a.imag() << ")";
	return out;
}



